// -------------------------------------------------------------------------------------------------
// <copyright file="{{ TypeDrop.Name }}Extensions.cs" company="Starion Group S.A.">
//
//   Copyright 2022-2024 Starion Group S.A.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//
// </copyright>
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// --------THIS IS AN AUTOMATICALLY GENERATED FILE. ANY MANUAL CHANGES WILL BE OVERWRITTEN!--------
// ------------------------------------------------------------------------------------------------

namespace Kalliope.Dal
{
    using System;
    using System.Collections.Concurrent;
    using System.Collections.Generic;
    using System.Linq;

    using Kalliope.Absorption;
    using Kalliope.Common;
    using Kalliope.Core;
    using Kalliope.CustomProperties;
    using Kalliope.Diagrams;

    /// <summary>
    /// A static class that provides extension methods for the <see cref="{{TypeDrop.Name}}"/> class
    /// </summary>
    public static class {{TypeDrop.Name}}Extensions
    {
		{% if TypeDrop.IsAbstract == false %}
        /// <summary>
        /// Updates the value properties of the <see cref="{{ TypeDrop.Name }}"/> by setting the value equal to that of the dto
        /// Removes deleted objects from the reference properties and returns the unique identifiers
        /// of the objects that have been removed from <see cref="AggregationKind.Composite"/> properties
        /// </summary>
        /// <param name="poco">
        /// The <see cref="{{ TypeDrop.Name }}"/> that is to be updated
        /// </param>
        /// <param name="dto">
        /// The DTO that is used to update the <see cref="{{ TypeDrop.Name }}"/> with
        /// </param>
        /// <returns>
        /// The unique identifiers of the objects that have been removed from <see cref="AggregationKind.Composite"/> properties
        /// </returns>
        /// <exception cref="ArgumentNullException">
        /// Thrown when the <paramref name="poco"/> or <paramref name="dto"/> is null
        /// </exception>
        public static IEnumerable<string> UpdateValueAndRemoveDeletedReferenceProperties(this {{ TypeDrop.Namespace }}.{{ TypeDrop.Name }} poco, Kalliope.DTO.{{ TypeDrop.Name }} dto)
        {
			{% if TypeDrop.AllReferencePropertiesCount != 0 %}
            if (poco == null)
            {
                throw new ArgumentNullException(nameof(poco), $"the {nameof(poco)} may not be null");
            }

            if (dto == null)
            {
                throw new ArgumentNullException(nameof(dto), $"the {nameof(dto)} may not be null");
            }

            var identifiersOfObjectsToDelete = new List<string>();

			{% for property in TypeDrop.AllProperties %}
			{% if property.IsValueType and property.Name != "Id" %}
            poco.{{ property.Name }} = dto.{{ property.Name }};

			{% elseif property.IsReferenceType and property.IsEnumerable == true %}
            var {{ property.Name | LowerCaseFirstLetter}}ToDelete = poco.{{ property.Name }}.Select(x => x.Id).Except(dto.{{ property.Name }});
			{% if property.IsComposite %}
            identifiersOfObjectsToDelete.AddRange({{ property.Name | LowerCaseFirstLetter}}ToDelete);
			{% endif %}
            foreach (var identifier in {{ property.Name | LowerCaseFirstLetter}}ToDelete)
            {
                var {{ property.TypeName | LowerCaseFirstLetter}} = poco.{{ property.Name }}.Single(x => x.Id == identifier);
                poco.{{ property.Name }}.Remove({{ property.TypeName | LowerCaseFirstLetter}});
            }

			{% elseif property.IsReferenceType and property.IsEnumerable == false %}
            if (poco.{{ property.Name }} != null && poco.{{ property.Name }}.Id != dto.{{ property.Name }})
            {
				{% if property.IsComposite %}
                identifiersOfObjectsToDelete.Add(poco.{{ property.Name }}.Id);
				{% endif %}
                poco.{{ property.Name }} = null;
            }

			{% endif %}
			{% endfor %}

            return identifiersOfObjectsToDelete;
			{% else %}
            return new List<string>();
			{% endif %}
        }
		{% endif %}

		{% if TypeDrop.IsAbstract == false %}
        /// <summary>
        /// Updates the Reference properties of the <see cref="{{TypeDrop.Name}}"/> using the data (identifiers) encapsulated in the DTO
        /// and the provided cache to find the referenced object.
        /// </summary>
        /// <param name="poco">
        /// The <see cref="{{TypeDrop.Name}}"/> that is to be updated
        /// </param>
        /// <param name="dto">
        /// The DTO that is used to update the <see cref="{{TypeDrop.Name}}"/> with
        /// </param>
        /// <param name="cache">
        /// The <see cref="ConcurrentDictionary{String, Lazy{Kalliope.Core.ModelThing}}"/> that contains the
        /// <see cref="ModelThing"/>s that are know and cached.
        /// </param>
        /// <exception cref="ArgumentNullException"></exception>
        public static void UpdateReferenceProperties(this {{ TypeDrop.Namespace }}.{{TypeDrop.Name}} poco, Kalliope.DTO.{{TypeDrop.Name}} dto, ConcurrentDictionary<string, Lazy<Kalliope.Core.ModelThing>> cache)
        {
			{% if TypeDrop.AllReferencePropertiesCount != 0 %}
            if (poco == null)
            {
                throw new ArgumentNullException(nameof(poco), $"the {nameof(poco)} may not be null");
            }

            if (dto == null)
            {
                throw new ArgumentNullException(nameof(dto), $"the {nameof(dto)} may not be null");
            }

            if (cache == null)
            {
                throw new ArgumentNullException(nameof(cache), $"the {nameof(cache)} may not be null");
            }

            Lazy<Kalliope.Core.ModelThing> lazyPoco;

			{% for property in TypeDrop.AllProperties %}
			{% if property.IsReferenceType %}
			{% if property.IsEnumerable == true %}
            var {{ property.Name | LowerCaseFirstLetter }}ToAdd = dto.{{ property.Name }}.Except(poco.{{ property.Name }}.Select(x => x.Id));
            foreach (var identifier in {{ property.Name | LowerCaseFirstLetter }}ToAdd)
            {
                if (cache.TryGetValue(identifier, out lazyPoco))
                {
                    var {{ property.TypeName | LowerCaseFirstLetter }} = ({{ property.TypeName }})lazyPoco.Value;
                    poco.{{ property.Name }}.Add({{ property.TypeName | LowerCaseFirstLetter }});
                }
            }

			{% elseif property.IsEnumerable == false %}
            if (poco.{{ property.Name }} == null && !string.IsNullOrEmpty(dto.{{ property.Name }}) && cache.TryGetValue(dto.{{ property.Name }}, out lazyPoco))
            {
                poco.{{ property.Name }} = ({{ property.TypeName }})lazyPoco.Value;
            }

			{% endif %}
			{% endif %}
			{% endfor %}
			{% else %}
            // do nothing - The {{TypeDrop.Name}} class does not have any reference properties to update
			{% endif %}
        }
		{% endif %}
    }
}

// ------------------------------------------------------------------------------------------------
// --------THIS IS AN AUTOMATICALLY GENERATED FILE. ANY MANUAL CHANGES WILL BE OVERWRITTEN!--------
// ------------------------------------------------------------------------------------------------
 