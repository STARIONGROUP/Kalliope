// -------------------------------------------------------------------------------------------------
// <copyright file="ModelThingFactory.cs" company="Starion Group S.A.">
//
//   Copyright 2022-2024 Starion Group S.A.
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//
// </copyright>
// ------------------------------------------------------------------------------------------------

// ------------------------------------------------------------------------------------------------
// --------THIS IS AN AUTOMATICALLY GENERATED FILE. ANY MANUAL CHANGES WILL BE OVERWRITTEN!--------
// ------------------------------------------------------------------------------------------------

namespace Kalliope.Dal
{
    using System;

    /// <summary>
    /// The purpose of the <see cref="ModelThingFactory"/> is to create a <see cref="Kalliope.Core.ModelThing"/> POCO
    /// based on a <see cref="Kalliope.DTO.ModelThing"/> DTO
    /// </summary>
    public class ModelThingFactory : IModelThingFactory
    {
        /// <summary>
        /// Creates a <see cref="Kalliope.Core.ModelThing"/> POCO
        /// </summary>
        /// <param name="dto">
        /// the source <see cref="Kalliope.DTO.ModelThing"/> DTO
        /// </param>
        /// <returns>
        /// a <see cref="Kalliope.Core.ModelThing"/> POCO
        /// </returns>
        /// <exception cref="ArgumentNullException">
        /// thrown when <paramref name="dto"/> is null
        /// </exception>
        public Kalliope.Core.ModelThing Create(Kalliope.DTO.ModelThing dto)
        {
            if (dto == null)
            {
                throw new ArgumentNullException(nameof(dto), $"the {nameof(dto)} may not be null");
            }

            var typeName = dto.GetType().Name;

            switch (typeName)
            {
				{% for typeDrop in TypeDrops %}
                case "{{ typeDrop.Name }}":
                    var {{ typeDrop.Name | LowerCaseFirstLetter }} = dto as Kalliope.DTO.{{ typeDrop.Name }};
                    var {{ typeDrop.Name | LowerCaseFirstLetter }}Factory = new {{ typeDrop.Name }}Factory();
                    return {{ typeDrop.Name | LowerCaseFirstLetter }}Factory.Create({{ typeDrop.Name | LowerCaseFirstLetter }});
				{% endfor %}
                default:
                    throw new System.NotSupportedException($"{typeName} not yet supported");
            }
        }
    }
}

// ------------------------------------------------------------------------------------------------
// --------THIS IS AN AUTOMATICALLY GENERATED FILE. ANY MANUAL CHANGES WILL BE OVERWRITTEN!--------
// ------------------------------------------------------------------------------------------------
